import random
import csv, codecs

import pandas as pd
import numpy as np
import tensorflow as tf

with codecs.open("./learn1.csv", "w", encoding="utf-8") as fp :
    csvWriter = csv.writer(fp, delimiter=",")
    csvWriter.writerow(["height", "weight", "heart", "love"])

    for i in range(0, 20000) :
        height = random.uniform(130, 200)
        weight = random.uniform(45, 100)
        heart  = random.randrange(1, 5)
        love   = random.choice(["hate", "some", "love", "crazy"])
        csvWriter.writerow([round(height, 1), round(weight, 1), heart, love])

csv = pd.read_csv("learn1.csv")

# 최대값을 설정해 데이터 정규화
csv["height"] = csv["height"] / 200
csv["weight"] = csv["weight"] / 100
csv["heart"]  = csv["heart"]  / 6

# 레이블을 배열로 변환
lable = {"hate":[1,0,0,0], "some":[0,1,0,0], "love":[0,0,1,0], "crazy":[0,0,0,1]}
csv["label_pat"] = csv["love"].apply(lambda x : np.array(lable[x]))

# 데이터 분류
test_csv = csv[10000:20000]
test_pat = test_csv[["weight", "height", "heart"]]
test_ans = list(test_csv["label_pat"])

# 텐서플로 사용
x  = tf.placeholder(tf.float32, [None, 3])
y_ = tf.placeholder(tf.float32, [None, 4])

# 변수선언
W = tf.Variable(tf.zeros([3,4])) # 가중치
b = tf.Variable(tf.zeros([4]))   # 바이아스

# 소프트맥스 회귀
y = tf.nn.softmax(tf.matmul(x, W) + b)

# 모델 훈련하기
cross_entropy = -tf.reduce_sum(y_ * tf.log(y))
optimizer = tf.train.GradientDescentOptimizer(0.01)
train = optimizer.minimize(cross_entropy)

# 정답률 구하기
predict = tf.equal(tf.argmax(y, 1), tf.argmax(y_,1))
acc = tf.reduce_mean(tf.cast(predict, tf.float32))

# 세션 시작
sess = tf.Session()
sess.run(tf.global_variables_initializer())

# 학습 시작
for study in range(10000) :
    i = (study * 100) % 14000
    rows = csv[1+i : 1+i+300]

    x_pat = rows[["weight", "height", "heart"]]
    y_ans = list(rows["label_pat"])

    fd = {x: x_pat, y_: y_ans}
    sess.run(train, feed_dict=fd)

    if study % 500 == 0 :
        cre = sess.run(cross_entropy, feed_dict=fd)
        accs = sess.run(acc, feed_dict={x:test_pat, y_:test_ans})
        print("study: ", study, "cre: ", cre, "accuracy: ", accs)


# 최종 정답률
accs = sess.run(acc, feed_dict={x:test_pat, y_:test_ans})
print("정답률: ", accs)
